/* ==========================================================================
   Shapes
   http://www.w3.org/TR/css-shapes-1/
   ========================================================================== */

/**
 * Arrow
 * https://css-tricks.com/snippets/css/css-triangle/
 *
 * @example
 * .arrow(@color: #db5252, @direction: bottom, @base: 12px, @height: 6px);
 */
.arrow(@base, @height: @base * sin(60deg), @color: black, @direction: top) {
    .arrow-direction() when (@direction = top) {
        border-left: @base / 2 solid transparent;
        border-right: @base / 2 solid transparent;
        border-bottom: @height solid @color;
    }

    .arrow-direction() when (@direction = bottom) {
        border-left: @base / 2 solid transparent;
        border-right: @base / 2 solid transparent;
        border-top: @height solid @color;
    }

    .arrow-direction() when (@direction = left) {
        border-top: @base / 2 solid transparent;
        border-bottom: @base / 2 solid transparent;
        border-right: @height solid @color;
    }

    .arrow-direction() when (@direction = right) {
        border-top: @base / 2 solid transparent;
        border-bottom: @base / 2 solid transparent;
        border-left: @height solid @color;
    }

    width: 0;
    height: 0;
    .arrow-direction();
}

/**
 * Arrow <Direction>
 *
 * @example
 * .arrow-up(@base: 100px, @height: 100px, @color: gray);
 * .arrow-down(@base: 100px, @height: 100px, @color: gray);
 * .arrow-left(@base: 100px, @height: 100px, @color: gray);
 * .arrow-right(@base: 100px, @height: 100px, @color: gray);
 */
.arrow-up(@base, @height: @base * sin(60deg), @color: black)    {
    .arrow(@base: @base, @height: @height, @color: @color, @direction: top);
}
.arrow-down(@base, @height: @base * sin(60deg), @color: black)  {
    .arrow(@base: @base, @height: @height, @color: @color, @direction: bottom);
}
.arrow-left(@base, @height: @base * sin(60deg), @color: black)  {
    .arrow(@base: @base, @height: @height, @color: @color, @direction: left);
}
.arrow-right(@base, @height: @base * sin(60deg), @color: black) {
    .arrow(@base: @base, @height: @height, @color: @color, @direction: right);
}

/**
 * Square
 *
 * @example
 * .square(@size: 100px, @color: tomato);
 */
.square(@size, @color: black) {
    .rectangle(@size, @size, @color);
}

/**
 * Rectangle
 *
 * @example
 * .rectangle(@width: 150px, @height: 100px, @color: lightblue);
 */
.rectangle(@width, @height, @color: black) {
    width: @width;
    height: @height;
    background-color: @color;
}

/**
 * Circle
 *
 * @example
 * .circle(@radius: 50px, @color: lightgreen);
 */
.circle(@radius, @color: black) {
    .square(@radius * 2, @color);
    .border-radius(@radius);
}

/**
 * Oval
 *
 * @example
 * .oval(@width: 150px, @height: 100px, @color: gold);
 */
.oval(@width, @height, @color: black) {
    .rectangle(@width, @height, @color);
    .border-radius(@width / 2 ~"/" @height / 2);
}

/**
 * Ring
 *
 * @example
 * .ring(@radius-large: 50px, @radius-small: 30px, @color: chocolate);
 */
.ring(@radius-large, @radius-small, @color: black) {
    width: @radius-small * 2;
    height: @radius-small * 2;
    border: @radius-large - @radius-small solid @color;
    .border-radius(@radius-large);
}

/**
 * Triangle
 *
 * @example
 * .triangle(@base: 100px, @height: 100px, @color: lightseagreen);
 */
.triangle(@base, @height: @base * sin(60deg), @color: black, @direction: top) {
    .diamond(@width: @base, @height: @height * 2, @color: @color, @half: true);
    overflow: hidden;
}

/**
 * Triangle <Direction>
 */
.triangle-up(@base, @height: @base * sin(60deg), @color: black)    {
    .triangle(@base: @base, @height: @height, @color: @color, @direction: top);
}
.triangle-down(@base, @height: @base * sin(60deg), @color: black)  {
    .triangle(@base: @base, @height: @height, @color: @color, @direction: bottom);
}
.triangle-left(@base, @height: @base * sin(60deg), @color: black)  {
    .triangle(@base: @base, @height: @height, @color: @color, @direction: left);
}
.triangle-right(@base, @height: @base * sin(60deg), @color: black) {
    .triangle(@base: @base, @height: @height, @color: @color, @direction: right);
}

/**
 * Diamond
 *
 * @example
 * .diamond(@width: 150px, @height: 100px, @color: lightpink);
 */
.diamond(@width, @height, @color: black, @half: false) {
    @side: sqrt(@width * @width / 4 + @height * @height / 4);

    .diamond-transform() when (@width = @height) {
        @delta: @side;
        .transform(rotate(45deg));
    }

    .diamond-transform() when (default()) {
        @angle: asin(@height / @side / 2);
        @skew: @angle - convert(45deg, rad);
        @delta: @side * cos(@skew);
        .transform(rotate(45deg) skew(@skew, @skew));
    }

    .diamond-height() when not (@half = true) {
        height: @height;
    }

    .diamond-height() when (@half = true) {
        height: @height / 2;
    }

    width: @width;
    .diamond-height();
    position: relative;

    &:before {
        .diamond-transform();

        content: "";
        position: absolute;
        left: (@width - @delta) / 2;
        top: (@height - @delta) / 2;
        width: @delta;
        height: @delta;
        background-color: @color;
    }
}

/**
 * Cross
 *
 * @example
 * .cross(@size: 100px, @weight: 20px, @color: silver);
 */
.cross(@size, @weight, @color: black) {
    position: relative;
    width: @size;
    height: @size;

    &:before {
        content: "";
        position: absolute;
        .rectangle(@size, @weight, @color);
        margin: (@size - @weight) / 2 0;
    }

    &:after {
        content: "";
        position: absolute;
        .rectangle(@weight, @size, @color);
        margin: 0 (@size - @weight) / 2;
    }
}

/**
 * Heart
 *
 * @example
 * .heart(@size: 100px, @color: lightcoral);
 */
.heart(@size, @color: black) {
    @width: @size / 2;
    @inradius: @width / 2;
    @circumradius: @width / sqrt(2);
    @height: (@width + @circumradius - @inradius) / cos(45deg);

    position: relative;
    width: @size;
    height: @size;

    &:before,
    &:after {
        content: "";
        position: absolute;
        .rectangle(@width: @width, @height: @height, @color: @color);
        .border-radius(@inradius @inradius 0 0);
        .transform-origin(@inradius @inradius);
    }

    &:before {
        left: 0;
        bottom: 0;
        .transform(rotate(-45deg));
    }

    &:after {
        right: 0;
        bottom: 0;
        .transform(rotate(45deg));
    }
}

/**
 * Star
 */
.star() {}